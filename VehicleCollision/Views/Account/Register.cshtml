@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@model Rsk.AspNetCore.Fido.Dtos.Base64FidoRegistrationChallenge

<h2>Use your Authenticator</h2>

<script>
    let challengeBytesAsString = atob("@Html.Raw(Model.Base64Challenge)");
    let challenge = new Uint8Array(challengeBytesAsString.length);
    for (let i = 0; i < challengeBytesAsString.length; i++) {
        challenge[i] = challengeBytesAsString.charCodeAt(i);
    }

    //add in more public key support algos
    const pubKeyCredParams =[
    {
        type: "public-key",
        alg: -8
        },
        {
        type: "public-key",
        alg: -259

        },
        {
        type: "public-key",
        alg: -39

        }

    ];

    let rp = {
        //party id is server name
        id: "@Model.RelyingPartyId",
        name: "FIDO Intex"
    };

    let userHandleBytesAsString = atob("@Html.Raw(Model.Base64UserHandle)");
    let userHandle = new Uint8Array(userHandleBytesAsString.lenth);
    for (let i = 0; i < userHandleBytesAsString.length; i++) {
        userHandle[i] = userHandleBytesAsString.charCodeAt(i);
    }

    let user = {
        name: "@Model.UserId",
        displayName: "@Model.UserId",
        id: userHandle
    };

    navigator.credentials.create({ publicKey: {challenge, rp, user, pubKeyCredParams } })
        .then((credentials) => {
            let encodedCredentials = {
                id: credentials.id,
                rawId: btoa(String.fromCharCode.apply(null, new Uint8Array(credentials.rawId))),
                type: credentials.type,
                response: {
                    attestationObject:
                        btoa(String.fromCharCode.apply(null, new Uint8Array(credentials.response.attestationObject))),
                    clientDataJson:
                        btoa(String.fromCharCode.apply(null, new Uint8Array(credentials.response.clientDataJson)))
                }
            };


            //post back to server with details

            $.ajax({
                url: '/Fido/CompleteRegis',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(encodedCredentials),
                success: function () {
                    window.location.href = "/";
                },
                erro: function () {
                    console.error("Error on server side");
                }
            });
        })
        .catch((error) => {
            console.error(error);
        });

</script>
