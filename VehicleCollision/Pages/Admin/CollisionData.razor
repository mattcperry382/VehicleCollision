@page "/admin/collisions/"
@page "/admin"
@page "/collisions/{Page:int}"

@inherits OwningComponentBase<ICollisionRepository>
@using VehicleCollision.Models.ViewModels 

<div class="d-flex flex-row justify-content-between align-content-center">
    <h1>Collisions</h1>
    <div>
        <NavLink class="btn btn-primary" href="/admin/collisions/create">Create</NavLink>
    </div>
</div>



@*<div class="row m-1 p-1">
    <div id="crashseverity" class="col-2">
        <h5 class="text-center">Collision Severity</h5>
        <vc:crash-severity></vc:crash-severity>

    </div>

    <div class="col-10">
        <h1>Collisions</h1>
        <div page-number="@Model.PageInfo" page-action="CollisionData" page-class-enabled="true" page-class="btn"
             page-class-normal="btn-outline-dark" page-class-selected="btn-primary" class="btn-group pull-right m-1"></div>

        <div></div>*@


<div class="m-1 form-group">
    <input class="form-control" type="text" placeholder="Filter..."
           @bind="Filter"
           @bind:event="oninput">
</div>

        <Paging PI="pagingInfo" PageClassesEnabled="true" PageClass="btn-outline-dark btn" PageClassSelected="btn btn-primary"></Paging>
        <table class="table table-responsive table-striped table-bordered">
            <thead class="thead-dark">
                <tr>
                    @*<td>#</td>*@
                    <td>Crash ID</td>
                    <td>Date/Time</td>
                    <td>Route</td>
                    <td>Milepoint</td>
                    <td>Location (lat/long)</td>
                    <td>Road Name</td>
                    <td>City</td>
                    <td>County</td>
                    <td>Crash Severity</td>
                    <td>Tags</td>
                    <td>Details</td>
                    <td>Edit</td>
                    <td>Delete</td>
                </tr>
            </thead>
            <tbody>
                @if (Crashes?.Count() > 0)
                {
                    @foreach (Crash c in Crashes)
                    {
                        @if (1 == 1)
                        {
                            //if (!IsVisible(c))
                            //    continue;
                            <tr>
                                @*<td>@(i += 1)</td>*@
                                <td>@c.CrashId</td>
                                <td>@c.CrashDatetime</td>
                                <td>@c.Route</td>
                                <td>@c.Milepoint</td>
                                @*href="http://maps.google.com/maps?z=12&t=m&q=loc:@(c.LatUtmY)+@(c.LongUtmX)"*@
                                <td><a>(@c.LatUtmY, @c.LongUtmX)</a></td>
                                <td>@c.MainRoadName</td>
                                <td>@c.City</td>
                                <td>@c.CountyName</td>
                                <td>@c.CrashSeverity.Description</td>
                                <td>
                                    @if (c.WorkZoneRelated)
                                    {<p>Work-Zone Related</p>}
                                    @if (c.PedestrianInvolved)
                                    {<p>Pedestrian Involved</p>}
                                    @if (c.BicyclistInvolved)
                                    {<p>Bicyclist Involved</p>}
                                    @if (c.MotorcycleInvolved)
                                    {<p>Motorcycle Involved</p>}
                                    @if (c.ImproperRestraint)
                                    {<p>Improper Restraint</p>}
                                    @if (c.Unrestrained)
                                    {<p>Unrestrained</p>}
                                    @if (c.Dui)
                                    {<p>DUI</p>}
                                    @if (c.IntersectionRelated)
                                    {<p>Intersection Related</p>}
                                    @if (c.WildAnimalRelated)
                                    {<p>Wild Animal Related</p>}
                                    @if (c.DomesticAnimalRelated)
                                    {<p>Domestic Animal Related</p>}
                                    @if (c.OverturnRollover)
                                    {<p>Overturn Rollover</p>}
                                    @if (c.CommercialMotorVehInvolved)
                                    {<p>Commercial Motor Vehicle Involved</p>}
                                    @if (c.TeenageDriverInvolved)
                                    {<p>Teenage Driver Involved</p>}
                                    @if (c.OlderDriverInvolved)
                                    {<p>Older Driver Involving</p>}
                                    @if (c.NightDarkCondition)
                                    {<p>Night Dark Condition</p>}
                                    @if (c.SingleVehicle)
                                    {<p>Single Vehicle</p>}
                                    @if (c.DistractedDriving)
                                    {<p>Distracted Driving</p>}
                                    @if (c.DrowsyDriving)
                                    {<p>Drowsy Driving</p>}
                                    @if (c.RoadwayDeparture)
                                    {<p>Roadway Departure</p>}
                                </td>
                                <td>
                                    <NavLink class="btn btn-info btn-sm" href="@GetDetailsUrl(c.CrashId)">Details</NavLink>
                                </td>
                                <td>
                                    <NavLink class="btn btn-warning btn-sm" href="@GetEditUrl(c.CrashId)">Edit</NavLink>
                                </td>
                                <td>
                                    <button id="delete" class="btn btn-danger btn-sm" @onclick="@(x => RemoveCrash(c))">Delete</button>
                                </td>
                            </tr>
                        }
                        else
                        {

                        }
                    }
                }
                else if (Crashes?.Count() == 0)

                {
                    <tr><td colspan="14" class="text-secondary text-center font-weight-bold">No Collisions</td></tr>
                }
                else
                {
                    <tr><td colspan="14" class="text-secondary text-center font-weight-bold">Loading Collisions...</td></tr>
                }
            </tbody>

        </table>
        <Paging PI="pagingInfo" PageClassesEnabled="true" PageClass="btn-outline-dark btn" PageClassSelected="btn btn-primary"></Paging>

    @*</div>
</div>*@

@code {
    public ICollisionRepository repo => Service;
    public int i { get; set; }
    public IEnumerable<Crash> Crashes { get; set; }

    public string Filter { get; set; }

    public bool IsVisible(Crash crash)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;

        if (crash.CountyName.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (crash.City.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;


        if (crash.MainRoadName.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;


        if (crash.Route.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        if (crash.CrashSeverity.Description.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        //if (crash.CrashSeverity.Description.ToString().StartsWith(Filter) || crash.CrashSeverity.Description.ToString().StartsWith(Filter))
        //    return true;

        return false;
    }

    protected async override Task OnInitializedAsync()
    {

        await UpdateData();
    }

    public async Task UpdateData()
    {
        Crashes = await repo.Crashes
        .Include(x => x.CrashSeverity)
        .ToListAsync();
    }

    public string GetDetailsUrl(long id) => $"admin/collisions/details/{id}";
    public string GetEditUrl(long id) => $"admin/collisions/edit/{id}";
    public async Task RemoveCrash(Crash c)
    {
        repo.DeleteCrash(c);
        await UpdateData();
    }

    [Parameter]
    public int page { get; set; }

    PageInfo pagingInfo = new PageInfo();

    protected override void OnParametersSet()
    {
        CreatePagingInfo();
    }

    public void CreatePagingInfo()
    {
        var AllCrashes = repo.Crashes.Include(c => c.CrashSeverity);

        int PageSize = 25;
        pagingInfo = new PageInfo();
        page = page == 0 ? 1 : page;
        pagingInfo.CurrentPage = page;
        pagingInfo.TotalNumCrashes = AllCrashes.Count();
        pagingInfo.CrashesPerPage = PageSize;

        var skip = PageSize * (Convert.ToInt32(page) - 1);
        Crashes = AllCrashes.Skip(skip).Take(PageSize).ToList();
    }
}
