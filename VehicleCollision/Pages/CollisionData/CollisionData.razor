@page "/CollisionData"

@using VehicleCollision.Models
@inherits OwningComponentBase<ICollisionRepository>
@{
}

<h1>Collisions</h1>


<table class="table table-responsive table-striped table-bordered">
    <thead class="thead-dark">
        <tr>
            <td>ID</td>
            <td>Date/Time</td>
            <td>Route</td>
            <td>Milepoint</td>
            <td>Location (lat/long)</td>
            <td>Road Name</td>
            <td>City</td>
            <td>County</td>
            <td>Crash Severity</td>
            <td>Tags</td>
        </tr>
    </thead>
    <tbody>
        @if (Crashes?.Count() > 0)
        {
        @foreach (Crash c in Crashes)
        {
            <tr>
                <td>@c.CrashId</td>
                <td>@c.CrashDatetime</td>
                <td>@c.Route</td>
                <td>@c.Milepoint</td>
                <td>@c.LatUtmY, @c.LongUtmX</td>
                <td>@c.MainRoadName</td>
                <td>@c.City</td>
                <td>@c.CountyName</td>
                <td>@c.CrashSeverity.Description</td>
                <td>
                    @if (c.WorkZoneRelated)
                    {<p>Work-Zone Related</p>}
                    @if (c.PedestrianInvolved)
                    {<p>Pedestrian Involved</p>}
                    @if (c.BicyclistInvolved)
                    {<p>Bicyclist Involved</p>}
                    @if (c.MotorcycleInvolved)
                    {<p>Motorcycle Involved</p>}
                    @if (c.ImproperRestraint)
                    {<p>Improper Restraint</p>}
                    @if (c.Unrestrained)
                    {<p>Unrestrained</p>}
                    @if (c.Dui)
                    {<p>DUI</p>}
                    @if (c.IntersectionRelated)
                    {<p>Intersection Related</p>}
                    @if (c.WildAnimalRelated)
                    {<p>Wild Animal Related</p>}
                    @if (c.DomesticAnimalRelated)
                    {<p>Domestic Animal Related</p>}
                    @if (c.OverturnRollover)
                    {<p>Overturn Rollover</p>}
                    @if (c.CommercialMotorVehInvolved)
                    {<p>Commercial Motor Vehicle Involved</p>}
                    @if (c.TeenageDriverInvolved)
                    {<p>TeenageDriverInvolved</p>}
                    @if (c.OlderDriverInvolved)
                    {<p>Older Driver Involving</p>}
                    @if (c.NightDarkCondition)
                    {<p>Night Dark Condition</p>}
                    @if (c.SingleVehicle)
                    {<p>Single Vehicle</p>}
                    @if (c.DistractedDriving)
                    {<p>Distracted Driving</p>}
                    @if (c.DrowsyDriving)
                    {<p>Drowsy Driving</p>}
                    @if (c.RoadwayDeparture)
                    {<p>Roadway Departure</p>}
                </td>
            </tr>
        }}
        else
            {
                <tr><td colspan="10" class="text-secondary text-center font-weight-bold">No Collisions</td></tr>
            }
    </tbody>
</table>


@code {
    public ICollisionRepository repo => Service;

    public IEnumerable<Crash> Crashes { get; set; }

    protected async override Task OnInitializedAsync()
    {

        await UpdateData();
    }

    public async Task UpdateData()
    {
        Crashes = await repo.Crashes
        .Include(x =>x.CrashSeverity)
        .ToListAsync();
    }

    //public async Task DeleteAppointment(Appointment a)
    //{


    //    var timeSlot = repo.TimeSlots.FirstOrDefault(x => x.TimeSlotId == a.TimeSlotId);
    //    timeSlot.Taken = false;
    //    repo.DeleteAppoint(a);
    //    await UpdateData();
    //}

    //public string GetEditUrl(long id) => $"/appointments/appointments/appointedit/{id}";

}